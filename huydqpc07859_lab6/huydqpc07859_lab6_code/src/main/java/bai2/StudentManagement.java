/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package bai2;

import java.awt.Color;
import java.sql.Date;
import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.border.LineBorder;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author huyyd
 */
public class StudentManagement extends javax.swing.JFrame {

    private LineBorder red = new LineBorder(Color.red);
    private LineBorder gray = new LineBorder(Color.gray);
    private StudentRepository studentRepository = new StudentRepository();
    private int selected = -1;

    public static boolean isVietnamesePhoneNumber(String number) {
        String vietnamesePhoneRegex = "^(03|05|07|08|09|01[2|6|8|9])+([0-9]{8})\\b";
        Pattern pattern = Pattern.compile(vietnamesePhoneRegex);
        Matcher matcher = pattern.matcher(number);
        return matcher.matches();
    }

    /**
     * Creates new form StudentManagement
     */
    public StudentManagement() {
        initComponents();
        tblStudent.setRowSelectionInterval(0, 0);
        this.setLocationRelativeTo(null);
        updateTable();
        resetForm();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblStudent = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtAddress = new javax.swing.JTextArea();
        txtParentName = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtContact = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        cboStandard = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        cboFees = new javax.swing.JComboBox<>();
        jPanel1 = new javax.swing.JPanel();
        btnNew = new javax.swing.JButton();
        btnInsert = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnNext = new javax.swing.JButton();
        btnPre = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();
        lblCreateAt = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tblStudent.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Name", "Standard"
            }
        ));
        tblStudent.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblStudentMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblStudent);

        jLabel1.setText("Name:");

        jLabel2.setText("Address:");

        jLabel3.setText("ParentName:");

        txtName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtNameKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNameKeyTyped(evt);
            }
        });

        txtAddress.setColumns(20);
        txtAddress.setRows(5);
        txtAddress.setText("\n");
        txtAddress.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtAddressKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtAddressKeyTyped(evt);
            }
        });
        jScrollPane2.setViewportView(txtAddress);

        txtParentName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtParentNameKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtParentNameKeyTyped(evt);
            }
        });

        jLabel4.setText("Phone number:");

        txtContact.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtContactKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtContactKeyTyped(evt);
            }
        });

        jLabel5.setText("Standard:");

        cboStandard.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "............................", "Java", "PHP", "NodeJS", "ReactJS", "Angular", "Kotlin" }));

        jLabel6.setText("Fees:");

        cboFees.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "............................", "100000", "200000", "250000", "300000", "350000", "400000", "450000", "500000" }));

        btnNew.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons8-reset-30.png"))); // NOI18N
        btnNew.setText("New");
        btnNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewActionPerformed(evt);
            }
        });

        btnInsert.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons8-add-30.png"))); // NOI18N
        btnInsert.setText("Insert");
        btnInsert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInsertActionPerformed(evt);
            }
        });

        btnEdit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons8-edit-30.png"))); // NOI18N
        btnEdit.setText("Edit");
        btnEdit.setAutoscrolls(true);
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        btnUpdate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons8-update-30.png"))); // NOI18N
        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnNext.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons8-next-30.png"))); // NOI18N
        btnNext.setText("Next");
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });

        btnPre.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons8-previous-30.png"))); // NOI18N
        btnPre.setText("Previous");
        btnPre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPreActionPerformed(evt);
            }
        });

        btnDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons8-delete-30.png"))); // NOI18N
        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnExit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons8-exit-30.png"))); // NOI18N
        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnNew)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnInsert, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnNext)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnPre)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnEdit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnDelete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnUpdate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnExit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnNew)
                    .addComponent(btnInsert)
                    .addComponent(btnEdit)
                    .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnNext, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnPre)
                    .addComponent(btnDelete)
                    .addComponent(btnExit))
                .addContainerGap())
        );

        lblCreateAt.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblCreateAt.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblCreateAt.setText("Register date: ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(440, 440, 440)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(txtParentName, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cboStandard, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtContact, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtName, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 254, Short.MAX_VALUE)
                    .addComponent(cboFees, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 358, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(39, 39, 39))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(120, 120, 120)
                        .addComponent(lblCreateAt, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 384, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(lblCreateAt)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtParentName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtContact, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(cboStandard, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cboFees, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 42, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        // TODO add your handling code here:
        if (this.btnEdit.getText().equalsIgnoreCase("Cancel")) {
            showWarn("Đang trong quá trình edit vui lòng nhấn update để hoàn thành hoặc chọn cancel hoặc new");
            return;
        }
        this.dispose();
    }//GEN-LAST:event_btnExitActionPerformed

    private void btnNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewActionPerformed
        // TODO add your handling code here:
        resetForm();
        this.selected = -1;
    }//GEN-LAST:event_btnNewActionPerformed

    private void updateTable() {
        ArrayList<Student> list = new ArrayList<>();
        list = (ArrayList<Student>) studentRepository.getStudents();
        DefaultTableModel model = (DefaultTableModel) tblStudent.getModel();
        model.setRowCount(0);
        if (list.size() > 0) {
            for (Student student : list) {
                model.addRow(new Object[]{student.getName(), student.getStandard()});
                tblStudent.setModel(model);
            }
        }
    }

    private void btnInsertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInsertActionPerformed
        // TODO add your handling code here:
        if (btnEdit.getText().equalsIgnoreCase("cancel")) {
            showWarn("Đang trong quá trình update vui lòng hoàn thành quá trình update hoặc nhấn nút new");
            return;
        }
        if (!txtName.isEditable()) {
            showWarn("Đang trong quá trình xem vui lòng chọn new để có thể nhập sinh viên");
            return;
        }
        if (validateForm()) {
            if (studentRepository.findByName(this.txtName.getText()) != null) {
                showError("Tên sinh viên đã tồn tại");
                return;
            }
            if (studentRepository.addStudent(createStudent())) {
                showSuccess("Thêm thành công sinh viên");
                updateTable();
                resetForm();
            } else {
                showError("Có lỗi trong quá trình thêm");
            }
        }
    }//GEN-LAST:event_btnInsertActionPerformed

    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
        // TODO add your handling code here:
        if (this.btnEdit.getText().equalsIgnoreCase("Cancel")) {
            showWarn("Đang trong quá trình edit vui lòng nhấn update để hoàn thành hoặc chọn cancel hoặc new");
            return;
        }
        ArrayList<Student> list = (ArrayList<Student>) this.studentRepository.getStudents();
        if (list.isEmpty()) {
            this.showSuccess("Danh sách sinh viên hiện đang rỗng!");
        } else {
            if (selected == -1) {
                Student std = this.studentRepository.findByName((String) this.tblStudent.getValueAt(selected = 0, 0));
                if (std != null) {
                    fillForm(std);
                }
            } else if (selected < list.size() - 1) {
                Student std = this.studentRepository.findByName((String) this.tblStudent.getValueAt(++selected, 0));
                if (std != null) {
                    fillForm(std);
                }
            }
        }
    }//GEN-LAST:event_btnNextActionPerformed
    private Student updateStd = null;
    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        // TODO add your handling code here:

        if (this.btnEdit.getText().equals("Edit")) {
            updateStd = this.studentRepository.findByName(this.txtName.getText());
            this.btnEdit.setText("Cancel");
            this.btnUpdate.setEnabled(true);
            this.enableForm();
        } else {
            if (this.btnEdit.getText().equals("Cancel")) {
                if (updateStd != null) {
                    fillForm(updateStd);
                }
                this.btnEdit.setText("Edit");
                this.btnUpdate.setEnabled(false);
                disableForm();
                return;

            }
            if (this.txtName.isEditable()) {
                showWarn("Chưa chọn sinh viên, vui lòng chọn sinh viên có trong bảng để có thể edit");
                return;
            }
        }
    }//GEN-LAST:event_btnEditActionPerformed

    private void fillForm(Student std) {
        resetForm();
        txtName.setText(std.getName());
        txtAddress.setText(std.getAddress());
        txtContact.setText(std.getContactNo());
        txtParentName.setText(std.getParentName());
        this.btnEdit.setEnabled(true);
        this.disableForm();
        this.lblCreateAt.setText("Register date: " + std.getRegDate().toString());
        this.lblCreateAt.setVisible(true);

        cboStandard.setSelectedItem(std.getStandard());
        cboFees.setSelectedItem(String.valueOf(std.getFees()));
    }

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        if (this.btnEdit.getText().equalsIgnoreCase("cancel")) {
            String name = this.txtName.getText();
            if (validateForm()) {
                Student student = this.studentRepository.findByName(updateStd.getName());
                if (student == null) {
                    showWarn("Không tìm thấy sinh viên");
                    return;
                }
                Student updateStudent = createStudent();
                updateStudent.setId(student.getId());
                if (this.studentRepository.updateStudent(updateStudent)) {
                    showSuccess("Update thành công nhân viên");
                    updateTable();
                    updateStd = null;
                    this.disableForm();
                    this.btnEdit.setText("Edit");
                    this.btnUpdate.setEnabled(false);
                } else {
                    showError("Có lỗi trong quá trình update");
                    fillForm(updateStd);
                }
            }
        } else {
            showWarn("Vui lòng chọn sinh viên và nhấn edit để có thể update");
        }

    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        if (this.btnEdit.getText().equalsIgnoreCase("Cancel")) {
            showWarn("Đang trong quá trình edit vui lòng nhấn update để hoàn thành hoặc chọn cancel hoặc new");
            return;
        }
        if (!txtName.isEditable()) {
            String name = txtName.getText();
            if (showConfirm("Bạn có muốn xóa sinh viên có name là " + name)) {
                Student std = this.studentRepository.findByName(name);
                if (std != null) {
                    int option = JOptionPane.showConfirmDialog(this, "Hiện bạn đang xem sinh viên có tên là " + this.txtName.getText() + " này không?", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
                    if (option == 0) {
                        if (this.studentRepository.deleteStudent(std.getId())) {
                            showSuccess("Xóa thành công sinh viên có name " + name);
                            updateTable();
                            this.selected = -1;
                            resetForm();
                        } else {
                            showError("Có lỗi trong quá trình delete nhân viên");
                            updateTable();
                        }
                        this.resetForm();
                    }
                } else {
                    showWarn("Không tìm thấy sinh viên có name là " + name);
                }
            }
        } else {
            showWarn("Vui lòng chọn sinh viên muốn xóa");
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void tblStudentMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblStudentMouseClicked
        // TODO add your handling code here:
        if (this.btnEdit.getText().equalsIgnoreCase("Cancel")) {
            showWarn("Đang trong quá trình edit vui lòng nhấn update để hoàn thành hoặc chọn cancel hoặc new");
            return;
        }
        JTable table = (JTable) evt.getSource();
        int row = table.rowAtPoint(evt.getPoint());
        String name = table.getValueAt(row, 0).toString();
        Student std = this.studentRepository.findByName(name);
        if (std != null) {
            this.fillForm(std);
        }

    }//GEN-LAST:event_tblStudentMouseClicked

    private void txtNameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNameKeyTyped
        // TODO add your handling code here:
        if (Character.isDigit(evt.getKeyChar())) {
            evt.consume();
        }
    }//GEN-LAST:event_txtNameKeyTyped

    private void txtAddressKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAddressKeyTyped
        // TODO add your handling code here:

    }//GEN-LAST:event_txtAddressKeyTyped

    private void txtParentNameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtParentNameKeyTyped
        // TODO add your handling code here:
        if (Character.isDigit(evt.getKeyChar())) {
            evt.consume();
        }
    }//GEN-LAST:event_txtParentNameKeyTyped

    private void txtContactKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtContactKeyTyped
        // TODO add your handling code here:
        if (!Character.isDigit(evt.getKeyChar()) || this.txtContact.getText().length() >= 10) {
            evt.consume();
        }
    }//GEN-LAST:event_txtContactKeyTyped

    private void btnPreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPreActionPerformed
        // TODO add your handling code here:
        if (this.btnEdit.getText().equalsIgnoreCase("Cancel")) {
            showWarn("Đang trong quá trình edit vui lòng nhấn update để hoàn thành hoặc chọn cancel hoặc new");
            return;
        }
        ArrayList<Student> list = (ArrayList<Student>) this.studentRepository.getStudents();
        if (list.isEmpty()) {
            this.showSuccess("Danh sách sinh viên hiện đang rỗng!");
        } else {
            if (selected <= -1) {
                Student std = this.studentRepository.findByName((String) this.tblStudent.getValueAt(selected = 0, 0));
                this.fillForm(std);
            } else if (selected > 0) {
                Student std = this.studentRepository.findByName((String) this.tblStudent.getValueAt(--selected, 0));
                this.fillForm(std);
            }
        }
    }//GEN-LAST:event_btnPreActionPerformed

    private void txtNameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNameKeyPressed
        // TODO add your handling code here:
        this.txtName.setBorder(gray);
    }//GEN-LAST:event_txtNameKeyPressed

    private void txtAddressKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAddressKeyPressed
        // TODO add your handling code here:
        this.txtAddress.setBorder(gray);
    }//GEN-LAST:event_txtAddressKeyPressed

    private void txtParentNameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtParentNameKeyPressed
        // TODO add your handling code here:
        this.txtParentName.setBorder(gray);
    }//GEN-LAST:event_txtParentNameKeyPressed

    private void txtContactKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtContactKeyPressed
        // TODO add your handling code here:
        this.txtContact.setBorder(gray);
    }//GEN-LAST:event_txtContactKeyPressed

    private void enableForm() {
        txtName.setEditable(true);
        txtAddress.setEditable(true);
        txtContact.setEditable(true);
        txtParentName.setEditable(true);
        cboFees.setEnabled(true);
        cboStandard.setEnabled(true);
    }

    private void disableForm() {
        txtName.setEditable(false);
        txtAddress.setEditable(false);
        txtContact.setEditable(false);
        txtParentName.setEditable(false);
        cboFees.setEnabled(false);
        cboStandard.setEnabled(false);
    }

    private void resetForm() {
        txtName.setText("");
        txtAddress.setText("");
        txtContact.setText("");
        txtParentName.setText("");
        txtName.requestFocus();

        txtName.setBorder(gray);
        txtAddress.setBorder(gray);
        txtContact.setBorder(gray);
        txtParentName.setBorder(gray);

        txtName.setBorder(gray);
        txtAddress.setBorder(gray);
        txtContact.setBorder(gray);
        txtParentName.setBorder(gray);

        this.updateStd = null;
        this.btnEdit.setText("Edit");
        this.btnEdit.setEnabled(false);
        this.btnUpdate.setEnabled(false);

        cboFees.setSelectedIndex(0);
        cboStandard.setSelectedIndex(0);

        enableForm();
        lblCreateAt.setVisible(false);

    }

    private Student createStudent() {
        return new Student(
                this.txtName.getText(),
                this.txtAddress.getText(),
                this.txtParentName.getText(),
                this.txtContact.getText(),
                (String) cboStandard.getSelectedItem(),
                Long.valueOf((String) cboFees.getSelectedItem()),
                new Date(System.currentTimeMillis())
        );
    }

    private boolean validateForm() {
        String name = txtName.getText();
        String address = txtAddress.getText();
        String contact = txtContact.getText();
        String parentName = txtParentName.getText();
        String error = "";
        int cboStandard = this.cboStandard.getSelectedIndex();
        int cboFees = this.cboFees.getSelectedIndex();

        if (contact.isEmpty()) {
            txtContact.requestFocus();
            error += "Contact không được để tróng\n";
            txtContact.setBorder(red);
        }
        if (parentName.isEmpty()) {
            txtParentName.requestFocus();
            error += "Email không được để trống\n";
            txtParentName.setBorder(red);
        }
        if (address.isEmpty()) {
            txtAddress.requestFocus();
            error += "Address không được để trống\n";
            txtAddress.setBorder(red);
        }
        if (name.isEmpty()) {
            txtName.requestFocus();
            error += "Name không được để trống\n";
            txtName.setBorder(red);
        }

        if (cboStandard == 0) {
            error += "Vui lòng chọn standard\n";
        }
        if (cboFees == 0) {
            error += "Vui lòng chọn fees\n";
        }

        if (!error.isEmpty()) {
            showError(error);
            return false;
        }

        if (!error.isEmpty()) {
            showError(error);
            return false;
        }

        if (!isVietnamesePhoneNumber(contact)) {
            showError("Vui lòng nhập đúng định dạng số điện thoại Việt Nam (đầu 03, 05, 07, 08, 09 và phải đủ 10 số)");
            txtContact.setBorder(red);
            txtContact.requestFocus();
            return false;
        }

        return true;
    }

    private boolean showConfirm(String mess) {
        int opt = JOptionPane.showConfirmDialog(this, mess, "Confirm", JOptionPane.YES_NO_OPTION);
        return opt == 0;
    }

    private void showError(String mess) {
        JOptionPane.showMessageDialog(this, mess, "Error", JOptionPane.ERROR_MESSAGE);
    }

    private void showSuccess(String mess) {
        JOptionPane.showMessageDialog(this, mess, "Success", JOptionPane.INFORMATION_MESSAGE);
    }

    private void showWarn(String mess) {
        JOptionPane.showMessageDialog(this, mess, "Warning", JOptionPane.WARNING_MESSAGE);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StudentManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StudentManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StudentManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StudentManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new StudentManagement().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnInsert;
    private javax.swing.JButton btnNew;
    private javax.swing.JButton btnNext;
    private javax.swing.JButton btnPre;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> cboFees;
    private javax.swing.JComboBox<String> cboStandard;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblCreateAt;
    private javax.swing.JTable tblStudent;
    private javax.swing.JTextArea txtAddress;
    private javax.swing.JTextField txtContact;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtParentName;
    // End of variables declaration//GEN-END:variables
}
